# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make test  	- makes everything and runs the built sample test.
#   make clean  - removes all files generated by make.

# Default Make Command to execute
default: all
# make <option> command executions
all: build_dirs build_open build_rx build_tx build_siso build_mimo
help: print_help
open: build_dirs build_open
rx: build_dirs build_rx
tx: build_dirs build_tx
siso: build_dirs build_siso
mimo: build_dirs build_mimo
test: build_dirs build_specs

#=====================================#
# Root Directories name
OBJ_DIR := obj
BUILD_DIR := bin
SRC_DIR := src
# Subdirectory name
TEST_DIR := $(SRC_DIR)/test
TX_DIR := $(SRC_DIR)/tx
RX_DIR := $(SRC_DIR)/rx
SISO_DIR := $(SRC_DIR)/siso
MIMO_DIR := $(SRC_DIR)/mimo
# Test Directories name
SPECS_DIR := specs
COVERAGE_DIR := $(SPECS_DIR)/coverage
SPECSDIR := $(SPECS_DIR)/coverage $(SPECS_DIR)/obj $(SPECS_DIR)/bin
#=====================================#
# Project Source files
OPEN_SRC = $(TEST_DIR)/open.cpp
RX_SRC = $(RX_DIR)/rx.cpp
TX_SRC = $(TX_DIR)/tx.cpp
SISO_SRC = $(SISO_DIR)/siso.cpp
MIMO_SRC = $(MIMO_DIR)/mimo.cpp
# Unit Testing Source files
SPECS_SRC = $(SPECS_DIR)/main.cpp
TESTS_SRC = $(SPECS_DIR)/tests.cpp
#=====================================#
# Project Objects 
OPEN_OBJ = $(OBJ_DIR)/test/open.o
RX_OBJ = $(OBJ_DIR)/rx/rx.o
TX_OBJ = $(OBJ_DIR)/tx/tx.o
SISO_OBJ = $(OBJ_DIR)/siso/siso.o
MIMO_OBJ = $(OBJ_DIR)/mimo/mimo.o
# All Project Objects Output
PROJECT_OBJ := $(OPEN_OBJ) $(RX_OBJ) $(TX_OBJ) $(SISO_OBJ) $(MIMO_OBJ)
OBJDIRS := $(sort $(dir $(PROJECT_OBJ)))
# Unit Testing Objects 
SPECS_OBJ = $(SPECS_DIR)/$(OBJ_DIR)/main.o
TESTS_OBJ = $(SPECS_DIR)/$(OBJ_DIR)/tests.o
# All Unit Tests Objects Output
TEST_OBJ := $(SPECS_OBJ) $(TESTS_OBJ)
TESTOBJDIRS := $(sort $(dir $(TEST_OBJ)))
#=====================================#
# Project binaries name
OPEN_BIN := $(BUILD_DIR)/open.bin
TX_BIN := $(BUILD_DIR)/tx.bin
RX_BIN := $(BUILD_DIR)/rx.bin
SISO_BIN := $(BUILD_DIR)/siso.bin
MIMO_BIN := $(BUILD_DIR)/mimo.bin
# All Project binries
PROJECT_BIN := $(OPEN_BIN) $(RX_BIN) $(TX_BIN) $(SISO_BIN) $(MIMO_BIN)
# Unit Test binary name
SPECS_BIN := $(SPECS_DIR)/bin/specs.bin
#=====================================#
# Coverage lcov Info file
LCOV_INFO := $(COVERAGE_DIR)/lcov.info
#=====================================#
# Compiler
CXX = g++
# Compilation Flags
SPECSFLAGS := --coverage
CXXFLAGS := -g -I$(SRC_DIR)
CPPFLAGS := -g
LDUFLAGS := -lpthread
LDFLAGS := -lpthread -lliquid -lboost_thread -lSoapySDR
# Gtest librarie location (usual)
GTEST_LIB = /usr/local/lib/libgtest.a
#=====================================#
# Command line commands
RMRF = rm -rf $1
MKDIR = mkdir -p $1
#=====================================#
build_specs:
	$(CXX) $(CPPFLAGS) -o $(SPECS_OBJ) -c $(SPECS_SRC) $(SPECSFLAGS)
	$(CXX) $(CPPFLAGS) -o $(TESTS_OBJ) -c $(TESTS_SRC) $(SPECSFLAGS)
	$(CXX) -o $(SPECS_BIN) $(SPECS_OBJ) $(TESTS_OBJ) $(GTEST_LIB) $(LDUFLAGS) $(SPECSFLAGS)
	$(SPECS_BIN)
	cd specs/coverage && gcov -o ../obj ../main.cpp
	lcov -c --directory $(SPECS_DIR)/ --output-file $(LCOV_INFO)

build_open:
	$(CXX) $(CXXFLAGS) -o $(OPEN_OBJ) -c $(OPEN_SRC)
	$(CXX) -o $(OPEN_BIN) $(OPEN_OBJ) $(LDFLAGS)

build_rx: 
	$(CXX) $(CXXFLAGS) -o $(RX_OBJ) -c $(RX_SRC)
	$(CXX) -o $(RX_BIN) $(RX_OBJ) $(LDFLAGS)

build_tx: 
	$(CXX) $(CXXFLAGS) -o $(TX_OBJ) -c $(TX_SRC)
	$(CXX) -o $(TX_BIN) $(TX_OBJ) $(LDFLAGS)

build_siso: 
	$(CXX) $(CXXFLAGS) -o $(SISO_OBJ) -c $(SISO_SRC)
	$(CXX) -o $(SISO_BIN) $(SISO_OBJ) $(LDFLAGS)

build_mimo: 
	$(CXX) $(CXXFLAGS) -o $(MIMO_OBJ) -c $(MIMO_SRC)
	$(CXX) -o $(MIMO_BIN) $(MIMO_OBJ) $(LDFLAGS)

build_dirs: 
	$(call MKDIR, $(BUILD_DIR) $(OBJDIRS) $(SPECSDIR))

install: 
	$(info Install is not yet supported...)
remove: 
	$(info Remove is not yet supported...)

lol: 
	$(info $(call RM, $(ALL_PROJECT_BIN) $(ALL_PROJECT_OBJ)))

print_help: 
	$(info SDR-PROJECTS Make help)
	$(info    make [all]  	- makes everything.)
	$(info    make TARGET 	- makes the given target.)
	$(info    make test  	- makes everything and runs the built sample test.)
	$(info    make clean  	- removes all files generated by make.)
	$(info    make install  - installs the compiled binary into /usr/local/bin)
	$(info    make remove  	- uninstalls the compiled binary into /usr/local/bin)

.PHONY: clean
clean:
	$(call RMRF, $(BUILD_DIR) $(OBJ_DIR) $(SPECSDIR))