# MIT License
#
# Copyright (c) 2020 Victor Bursucianu
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make test  	- makes everything and runs the built sample test.
#   make clean  - removes all files generated by make.

# Default Make Command to execute
default: all
# make <option> command executions
all: build_dirs build_open build_rx build_tx build_siso build_mimo
help: print_help
open: build_dirs build_open
rx: build_dirs build_rx
tx: build_dirs build_tx
siso: build_dirs build_siso
mimo: build_dirs build_mimo
test: build_dirs build_specs

#=====================================#
# Root Directories name
OBJ_DIR := obj
BUILD_DIR := bin
SRC_DIR := src
INCLUDE_DIR := include
# Source Subdirectory name
TEST_DIR := $(SRC_DIR)/test
TX_DIR := $(SRC_DIR)/tx
RX_DIR := $(SRC_DIR)/rx
SISO_DIR := $(SRC_DIR)/siso
MIMO_DIR := $(SRC_DIR)/mimo
COMMON_DIR := $(SRC_DIR)/common
# Header Subdirectory name

# Test Directories name
SPECS_DIR := specs
MOCKS_DIR := $(SPECS_DIR)/mocks
COVERAGE_DIR := $(SPECS_DIR)/coverage
SPECSDIR := $(SPECS_DIR)/coverage $(SPECS_DIR)/obj $(SPECS_DIR)/bin

#=====================================#
# Project Source files
OPEN_SRC = $(TEST_DIR)/open.cpp
RX_SRC = $(RX_DIR)/rx.cpp
TX_SRC = $(TX_DIR)/tx.cpp
SISO_SRC = $(SISO_DIR)/siso.cpp
MIMO_SRC = $(MIMO_DIR)/mimo.cpp
LIQUID_SRC = $(COMMON_DIR)/LiquidAdapter.cpp
ILIQUID_SRC = $(COMMON_DIR)/ILiquidAdapter.cpp
SIGNAL_PROCESSING_SERVICE_SRC = $(COMMON_DIR)/SignalProcessingService.cpp
# Unit Testing Source files
MAIN_SPECS_SRC = $(SPECS_DIR)/main.specs.cpp
SIGNAL_PROCESSING_SERVICE_SPECS_SRC = $(SPECS_DIR)/SignalProcessingService.specs.cpp
# Unit Testing Header files
ILIQUID_MOCK_INC = $(SPECS_DIR)/mocks/ILiquidAdapter.mock.h

#=====================================#
# Project Objects 
OPEN_OBJ = $(OBJ_DIR)/test/open.o
RX_OBJ = $(OBJ_DIR)/rx/rx.o
TX_OBJ = $(OBJ_DIR)/tx/tx.o
SISO_OBJ = $(OBJ_DIR)/siso/siso.o
MIMO_OBJ = $(OBJ_DIR)/mimo/mimo.o
LIQUID_ADAPTER_OBJ = $(OBJ_DIR)/common/LiquidAdapter.o
SIGNAL_PROCESSING_SERVICE_OBJ = $(OBJ_DIR)/common/SignalProcessingService.o
# All Project Objects Output
PROJECT_OBJ := $(OPEN_OBJ) $(RX_OBJ) $(TX_OBJ) $(SISO_OBJ) $(MIMO_OBJ) $(LIQUID_ADAPTER_OBJ)
OBJDIRS := $(sort $(dir $(PROJECT_OBJ)))
# Unit Testing Objects 
MAIN_SPECS_OBJ = $(SPECS_DIR)/$(OBJ_DIR)/main.specs.o
SIGNAL_PROCESSING_SERVICE_SPECS_OBJ = $(SPECS_DIR)/$(OBJ_DIR)/SignalProcessingService.specs.o
# All Unit Tests Objects Output
SPECS_OBJ := $(MAIN_SPECS_OBJ) $(TX_SPECS_OBJ)
SPECSOBJDIRS := $(sort $(dir $(SPECS_OBJ)))

#=====================================#
# Project binaries name
OPEN_BIN := $(BUILD_DIR)/open.bin
TX_BIN := $(BUILD_DIR)/tx.bin
RX_BIN := $(BUILD_DIR)/rx.bin
SISO_BIN := $(BUILD_DIR)/siso.bin
MIMO_BIN := $(BUILD_DIR)/mimo.bin
# All Project binries
PROJECT_BIN := $(OPEN_BIN) $(RX_BIN) $(TX_BIN) $(SISO_BIN) $(MIMO_BIN)
# Unit Test binary name
SPECS_BIN := $(SPECS_DIR)/bin/specs.bin

#=====================================#
# Coverage lcov Info file
LCOV_INFO := $(COVERAGE_DIR)/lcov.info
#=====================================#
# Compiler
CXX = g++
# Compilation Flags
SPECSFLAGS := --coverage
CXXFLAGS := -g -I$(SRC_DIR)
CPPFLAGS := -g
LDUFLAGS := -lpthread
LDFLAGS := -lpthread -lliquid -lboost_thread -lSoapySDR
# Gtest librarie location (usual)
GTEST_LIB = /usr/local/lib/libgtest.a
GMOCK_LIB = /usr/local/lib/libgmock.a
#=====================================#
# Command line commands
RMRF = rm -rf $1
MKDIR = mkdir -p $1
#=====================================#
# build:
#	mkdir -p out
#	g++ -o out/main.o -I ./headers -c src/main.cpp
#	g++ -o out/LiquidAdapter.o -I ./headers -c src/LiquidAdapter.cpp
#	g++ -o out/SignalProcessingService.o -I ./headers -c src/SignalProcessingService.cpp
#	g++ out/main.o out/LiquidAdapter.o out/SignalProcessingService.o -o out/main -lliquid
#
# test:
#	mkdir -p test-out
#	g++ -o test-out/main.spec.o -I ./headers -I ./specs/mocks -c specs/main.spec.cpp
#	g++ -o test-out/SignalProcessingService.spec.o -I ./headers -I ./specs/mocks -c specs/SignalProcessingService.spec.cpp
#	g++ -o test-out/test test-out/main.spec.o test-out/SignalProcessingService.spec.o /usr/local/lib/libgtest.a /usr/local/lib/libgmock.a out/SignalProcessingService.o -pthread
#	./test-out/test

# mkdir -p  bin
# g++ -g -Isrc -o obj/main.o -c src/main.cpp
# g++ -o bin/dsp obj/main.o -lpthread -lliquid -lboost_thread -lSoapySDR

# mkdir -p  bin
# g++ -o bin/dsp obj/main.o -lpthread -lliquid -lboost_thread -lSoapySDR

build_specs:
	$(CXX) $(CPPFLAGS) -o $(MAIN_SPECS_OBJ) -I $(INCLUDE_DIR) -I $(MOCKS_DIR) -c $(MAIN_SPECS_SRC) $(SPECSFLAGS)
	$(CXX) $(CPPFLAGS) -o $(SIGNAL_PROCESSING_SERVICE_SPECS_OBJ) -I $(INCLUDE_DIR) -I $(MOCKS_DIR) -c $(SIGNAL_PROCESSING_SERVICE_SPECS_SRC)
	$(CXX) -o $(SPECS_BIN) $(MAIN_SPECS_OBJ) $(SIGNAL_PROCESSING_SERVICE_SPECS_OBJ) $(GTEST_LIB) $(GMOCK_LIB) $(LDUFLAGS) $(SPECSFLAGS)
	$(SPECS_BIN)
	cd specs/coverage && gcov -o ../obj ../main.specs.cpp
	lcov -c --directory $(SPECS_DIR)/ --output-file $(LCOV_INFO)

build_open:
	$(CXX) $(CXXFLAGS) -o $(OPEN_OBJ) -c $(OPEN_SRC)
	$(CXX) -o $(OPEN_BIN) $(OPEN_OBJ) $(LDFLAGS)

build_rx: 
	$(CXX) $(CXXFLAGS) -o $(RX_OBJ) -c $(RX_SRC)
	$(CXX) -o $(RX_BIN) $(RX_OBJ) $(LDFLAGS)

build_tx: 
	$(CXX) $(CXXFLAGS) -o $(LIQUID_ADAPTER_OBJ) -I $(INCLUDE_DIR) -c $(LIQUID_SRC)
	$(CXX) $(CXXFLAGS) -o $(SIGNAL_PROCESSING_SERVICE_OBJ) -I $(INCLUDE_DIR) -c $(SIGNAL_PROCESSING_SERVICE_SRC)
	$(CXX) $(CXXFLAGS) -o $(TX_OBJ) -I $(INCLUDE_DIR) -c $(TX_SRC)
	$(CXX) $(TX_OBJ) $(LIQUID_ADAPTER_OBJ) $(SIGNAL_PROCESSING_SERVICE_OBJ) -o $(TX_BIN) $(LDFLAGS)

build_siso: 
	$(CXX) $(CXXFLAGS) -o $(SISO_OBJ) -c $(SISO_SRC)
	$(CXX) -o $(SISO_BIN) $(SISO_OBJ) $(LDFLAGS)

build_mimo: 
	$(CXX) $(CXXFLAGS) -o $(MIMO_OBJ) -c $(MIMO_SRC)
	$(CXX) -o $(MIMO_BIN) $(MIMO_OBJ) $(LDFLAGS)

build_dirs: 
	$(call MKDIR, $(BUILD_DIR) $(OBJDIRS) $(SPECSDIR))

install: 
	$(info Install is not yet supported...)
remove: 
	$(info Remove is not yet supported...)

lol: 
	$(info $(call RM, $(ALL_PROJECT_BIN) $(ALL_PROJECT_OBJ)))

print_help: 
	$(info SDR-PROJECTS Make help)
	$(info    make [all]  	- makes everything.)
	$(info    make TARGET 	- makes the given target.)
	$(info    make test  	- makes everything and runs the built sample test.)
	$(info    make clean  	- removes all files generated by make.)
	$(info    make install  - installs the compiled binary into /usr/local/bin)
	$(info    make remove  	- uninstalls the compiled binary into /usr/local/bin)

.PHONY: clean all
clean:
	$(call RMRF, $(BUILD_DIR) $(OBJ_DIR) $(SPECSDIR))